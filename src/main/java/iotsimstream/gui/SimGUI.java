/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iotsimstream.gui;

import iotsimstream.BigDatacenter;
import iotsimstream.GraphAppEngine;
import iotsimstream.Properties;
import iotsimstream.schedulingPolicies.Policy;
import iotsimstream.vmOffers.VMOffers;
import java.awt.Color;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.stream.IntStream;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Document;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang3.math.NumberUtils;
import org.cloudbus.cloudsim.DatacenterCharacteristics;
import org.cloudbus.cloudsim.Host;
import org.cloudbus.cloudsim.Log;
import org.cloudbus.cloudsim.NetworkTopology;
import org.cloudbus.cloudsim.Pe;
import org.cloudbus.cloudsim.VmAllocationPolicySimple;
import org.cloudbus.cloudsim.VmSchedulerSpaceShared;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.provisioners.BwProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.PeProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.RamProvisionerSimple;
import org.reflections.Reflections;

/**
 * 
 * @author Mutaz Barika
 */
public class SimGUI extends javax.swing.JFrame {

    ArrayList<Boolean> clouddatacenterConfigured=new ArrayList<>(); //cloud datacenter number is represented by index, the value is indicated whether such cloud datacenter is configured or not
    JFileChooser jfC = new JFileChooser();
    /**
     * Creates new form SimGUI
     */
    public SimGUI() {
        initComponents();
        this.jTabbedPane1.setEnabledAt(1,false);
        this.jTabbedPane1.setEnabledAt(2,false);
        //txtSchPolicy.setText("");
        //txtSchPolicy.setVisible(false);
        txtSimTime.getDocument().addDocumentListener(new EntryDocumentListener(txtSimTime,lblValSimTime));
        txtEngineBw.getDocument().addDocumentListener(new EntryDocumentListener(txtEngineBw,lblValEngineBw));
        txtEngineLat.getDocument().addDocumentListener(new EntryDocumentListener(txtEngineLat,lblValEngineLat));
        
        //Loading scheduling policies available in iotsimstream.schedulingPolicies package
        comboSchedulingPolicy.removeAll();
        comboSchedulingPolicy.addItem("Select scheduling policy");
        Reflections reflections = new Reflections("iotsimstream.schedulingPolicies");
        Set<Class<? extends Policy>> allClasses = reflections.getSubTypesOf(Policy.class);
        Iterator<Class <?extends Policy>> itr=allClasses.iterator();
        while(itr.hasNext())
        {
            Class cls=itr.next();
            comboSchedulingPolicy.addItem(cls.getName());
        } 
        lblValSchPolicy.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        spinnerNumOfClouds = new javax.swing.JSpinner();
        txtSimTime = new javax.swing.JTextField();
        txtEngineBw = new javax.swing.JTextField();
        txtEngineLat = new javax.swing.JTextField();
        btnToStep2 = new javax.swing.JButton();
        lblValSimTime = new javax.swing.JLabel();
        lblValSchPolicy = new javax.swing.JLabel();
        lblValEngineBw = new javax.swing.JLabel();
        lblValSpinnerNumOfClouds = new javax.swing.JLabel();
        lblValEngineLat = new javax.swing.JLabel();
        comboSchedulingPolicy = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        lblValDagFilePath = new javax.swing.JLabel();
        lblValDagFile = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        cboxCloudDatacenters = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeMulticloud = new javax.swing.JTree();
        jLabel7 = new javax.swing.JLabel();
        txtNumOfHosts = new javax.swing.JTextField();
        lblValNumOfHosts = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtVMDelay = new javax.swing.JTextField();
        lblValVMDelay = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lblValVMOffers = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtHostCores = new javax.swing.JTextField();
        lblValHostCores = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtHostMem = new javax.swing.JTextField();
        lblValHostMem = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtHostStore = new javax.swing.JTextField();
        lblValHostStore = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtCoreMIPS = new javax.swing.JTextField();
        lblValCoreMIPS = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtInternalBw = new javax.swing.JTextField();
        lblValInternalBw = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtInternalLat = new javax.swing.JTextField();
        lblValInternalLat = new javax.swing.JLabel();
        lblValExternalBw = new javax.swing.JLabel();
        txtExternalBw = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        lblValExternalLat = new javax.swing.JLabel();
        txtExternalLat = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        btnModifyAddStep2 = new javax.swing.JButton();
        btnToStep3 = new javax.swing.JButton();
        comboVMoffers = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        btnStartSim = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTabbedPane1.setName(""); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Simulation Time (seconds)");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Scheduling Policy");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Number of Clouds");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Engine Network Latency (seconds)");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Engine Network Bandwidth (MB/s)");

        spinnerNumOfClouds.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spinnerNumOfClouds.setValue(1);
        spinnerNumOfClouds.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerNumOfCloudsStateChanged(evt);
            }
        });

        txtSimTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSimTimeKeyReleased(evt);
            }
        });

        txtEngineBw.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEngineBwKeyReleased(evt);
            }
        });

        txtEngineLat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEngineLatKeyReleased(evt);
            }
        });

        btnToStep2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnToStep2.setText("Next Step");
        btnToStep2.setEnabled(false);
        btnToStep2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToStep2ActionPerformed(evt);
            }
        });

        lblValSimTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblValSchPolicy.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblValEngineBw.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblValSpinnerNumOfClouds.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblValEngineLat.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        comboSchedulingPolicy.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        comboSchedulingPolicy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSchedulingPolicyActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Open");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("DAG File");

        lblValDagFilePath.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblValDagFilePath.setText(" ");

        lblValDagFile.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblValDagFile.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnToStep2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtSimTime, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblValSimTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblValDagFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(comboSchedulingPolicy, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(lblValSchPolicy, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtEngineBw, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEngineLat, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spinnerNumOfClouds, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblValEngineBw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblValEngineLat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblValSpinnerNumOfClouds, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE)
                                .addComponent(lblValDagFile, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblValSimTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSimTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblValSchPolicy, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboSchedulingPolicy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel8)
                    .addComponent(lblValDagFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(lblValDagFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtEngineBw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValEngineBw, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtEngineLat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValEngineLat, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(spinnerNumOfClouds)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValSpinnerNumOfClouds, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(btnToStep2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113))
        );

        jTabbedPane1.addTab("Step 1: Simulation Configuration", jPanel1);

        cboxCloudDatacenters.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cboxCloudDatacenters.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboxCloudDatacenters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxCloudDatacentersActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Cloud Datacenter");

        treeMulticloud.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Multicoud Environment");
        treeMulticloud.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(treeMulticloud);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Number of hosts");

        txtNumOfHosts.setToolTipText("Type to add/update value in configuration tree");
        txtNumOfHosts.setEnabled(false);
        txtNumOfHosts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNumOfHostsKeyReleased(evt);
            }
        });

        lblValNumOfHosts.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("VM delay");

        txtVMDelay.setToolTipText("Type to add/update value in configuration tree");
        txtVMDelay.setEnabled(false);
        txtVMDelay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtVMDelayKeyReleased(evt);
            }
        });

        lblValVMDelay.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("VM offers class");

        lblValVMOffers.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Host cores");

        txtHostCores.setToolTipText("Type to add/update value in configuration tree");
        txtHostCores.setEnabled(false);
        txtHostCores.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHostCoresKeyReleased(evt);
            }
        });

        lblValHostCores.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Host memeory");

        txtHostMem.setToolTipText("Type to add/update value in configuration tree");
        txtHostMem.setEnabled(false);
        txtHostMem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHostMemKeyReleased(evt);
            }
        });

        lblValHostMem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Host storage");

        txtHostStore.setToolTipText("Type to add/update value in configuration tree");
        txtHostStore.setEnabled(false);
        txtHostStore.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHostStoreKeyReleased(evt);
            }
        });

        lblValHostStore.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Core MIPS");

        txtCoreMIPS.setToolTipText("Type to add/update value in configuration tree");
        txtCoreMIPS.setEnabled(false);
        txtCoreMIPS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCoreMIPSKeyReleased(evt);
            }
        });

        lblValCoreMIPS.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("Internal bandwidth");

        txtInternalBw.setToolTipText("Type to add/update value in configuration tree");
        txtInternalBw.setEnabled(false);
        txtInternalBw.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtInternalBwKeyReleased(evt);
            }
        });

        lblValInternalBw.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Internal latency");

        txtInternalLat.setToolTipText("Type to add/update value in configuration tree");
        txtInternalLat.setEnabled(false);
        txtInternalLat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtInternalLatKeyReleased(evt);
            }
        });

        lblValInternalLat.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblValExternalBw.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtExternalBw.setToolTipText("Type to add/update value in configuration tree");
        txtExternalBw.setEnabled(false);
        txtExternalBw.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtExternalBwKeyReleased(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setText("External bandwidth");

        lblValExternalLat.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtExternalLat.setToolTipText("Type to add/update value in configuration tree");
        txtExternalLat.setEnabled(false);
        txtExternalLat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtExternalLatKeyReleased(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("External latency");

        btnModifyAddStep2.setText("Add / Modify");
        btnModifyAddStep2.setEnabled(false);
        btnModifyAddStep2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyAddStep2ActionPerformed(evt);
            }
        });

        btnToStep3.setText("Next Step");
        btnToStep3.setEnabled(false);
        btnToStep3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToStep3ActionPerformed(evt);
            }
        });

        comboVMoffers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboVMoffersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(37, 37, 37)
                                .addComponent(txtVMDelay, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblValVMDelay, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(37, 37, 37)
                                .addComponent(txtHostMem, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblValHostMem, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(37, 37, 37)
                                .addComponent(txtHostStore, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblValHostStore, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(37, 37, 37)
                                .addComponent(txtCoreMIPS, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblValCoreMIPS, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(37, 37, 37)
                                .addComponent(txtInternalBw, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblValInternalBw, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(37, 37, 37)
                                .addComponent(txtInternalLat, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblValInternalLat, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(37, 37, 37)
                                .addComponent(txtExternalBw, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblValExternalBw, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(37, 37, 37)
                                .addComponent(txtExternalLat, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblValExternalLat, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(37, 37, 37)
                                        .addComponent(cboxCloudDatacenters, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(37, 37, 37)
                                        .addComponent(txtNumOfHosts, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblValNumOfHosts, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(37, 37, 37)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(comboVMoffers, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblValVMOffers, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtHostCores, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblValHostCores, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(26, 26, 26))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnModifyAddStep2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnToStep3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(22, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboxCloudDatacenters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtNumOfHosts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValNumOfHosts, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtVMDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValVMDelay, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboVMoffers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValVMOffers, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtHostCores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValHostCores, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtHostMem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValHostMem, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtHostStore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValHostStore, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCoreMIPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValCoreMIPS, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtInternalBw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValInternalBw, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtInternalLat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValInternalLat, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtExternalBw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValExternalBw, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtExternalLat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblValExternalLat, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(btnModifyAddStep2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnToStep3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        jTabbedPane1.addTab("Step 2: Multicloud Environment", jPanel2);

        btnStartSim.setText("Start Simulation");
        btnStartSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartSimActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(326, 326, 326)
                        .addComponent(btnStartSim)
                        .addGap(0, 295, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnStartSim)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Step 3: Execution & Results", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 763, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSimTimeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSimTimeKeyReleased
        //Check the value entered is numberic
        checkNumericAndUpdateComponents(txtSimTime,lblValSimTime);
        //Check to move to next step
        enableButtonToStep2();
    }//GEN-LAST:event_txtSimTimeKeyReleased

    private void txtEngineBwKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEngineBwKeyReleased
        //Check the value entered is a positive number
        checkAnyNumberAndUpdateComponents(txtEngineBw,lblValEngineBw);
        //Check to move to next step
        enableButtonToStep2();
    }//GEN-LAST:event_txtEngineBwKeyReleased

    private void txtEngineLatKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEngineLatKeyReleased
        //Check the value entered is a positive number
        checkAnyNumberAndUpdateComponents(txtEngineLat,lblValEngineLat);
        //Check to move to next step
        enableButtonToStep2();
    }//GEN-LAST:event_txtEngineLatKeyReleased

    private void spinnerNumOfCloudsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerNumOfCloudsStateChanged
        if(((Integer)spinnerNumOfClouds.getValue())<=1)
        {
            JOptionPane.showMessageDialog(null, "2 or more clouds to build Multicloud environment");
            spinnerNumOfClouds.setValue(2);
        }
        else
        {
            changeLabelTextAndColor(lblValSpinnerNumOfClouds, "Vaild", 85, 107, 47);
        }
        //Check to move to next step
        enableButtonToStep2();
    }//GEN-LAST:event_spinnerNumOfCloudsStateChanged

    private void btnToStep2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToStep2ActionPerformed
        //Change enable status of tabs
        this.jTabbedPane1.setEnabledAt(0, false);
        this.jTabbedPane1.setEnabledAt(1, true);
        this.jTabbedPane1.setEnabledAt(2, false);
        //Select the active tab
        this.jTabbedPane1.setSelectedIndex(1);
        //Load number of clouds in dropdown list for multicloud environment configuration
        cboxCloudDatacenters.removeAllItems();
        cboxCloudDatacenters.addItem("Select cloud datacenter");
        for(int i=0;i<(Integer)spinnerNumOfClouds.getValue();i++)
        {
            //Add cloud datacenter to combobox
            String value="Cloud Datacenter  "+(i+1);
            cboxCloudDatacenters.addItem(value);
            //Add cloud datacenter to tree
            DefaultTreeModel treeModel = (DefaultTreeModel) treeMulticloud.getModel();
            DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) treeModel.getRoot();
            DefaultMutableTreeNode parentNode=new DefaultMutableTreeNode(value);
            treeModel.insertNodeInto(parentNode, rootNode, rootNode.getChildCount());
            
            //Add configurations for cloud datacenter
            treeModel.insertNodeInto(new DefaultMutableTreeNode("datacenter.hosts = "), parentNode, parentNode.getChildCount());
            treeModel.insertNodeInto(new DefaultMutableTreeNode("vm.delay = "), parentNode, parentNode.getChildCount());
            treeModel.insertNodeInto(new DefaultMutableTreeNode("vm.offers = "), parentNode, parentNode.getChildCount());
            treeModel.insertNodeInto(new DefaultMutableTreeNode("host.cores = "), parentNode, parentNode.getChildCount());
            treeModel.insertNodeInto(new DefaultMutableTreeNode("host.memory = "), parentNode, parentNode.getChildCount());
            treeModel.insertNodeInto(new DefaultMutableTreeNode("host.storage = "), parentNode, parentNode.getChildCount());
            treeModel.insertNodeInto(new DefaultMutableTreeNode("core.mips = "), parentNode, parentNode.getChildCount());
            treeModel.insertNodeInto(new DefaultMutableTreeNode("internal.bandwidth = "), parentNode, parentNode.getChildCount());
            treeModel.insertNodeInto(new DefaultMutableTreeNode("internal.latency = "), parentNode, parentNode.getChildCount());
            treeModel.insertNodeInto(new DefaultMutableTreeNode("external.bandwidth = "), parentNode, parentNode.getChildCount());
            treeModel.insertNodeInto(new DefaultMutableTreeNode("external.latency = "), parentNode, parentNode.getChildCount());
            
            //Make cloud datacenter configuration is FALSE
            clouddatacenterConfigured.add(false);
        }
        treeMulticloud.expandRow(0);
        
        //Loading VM offers available in iotsimstream.vmOffers package
        comboVMoffers.removeAll();
        comboVMoffers.addItem("Select VM offer");
        Reflections reflections = new Reflections("iotsimstream.vmOffers");
        Set<Class<? extends VMOffers>> allClasses = reflections.getSubTypesOf(VMOffers.class);
        Iterator<Class <?extends VMOffers>> itr=allClasses.iterator();
        while(itr.hasNext())
        {
            Class cls=itr.next();
            comboVMoffers.addItem(cls.getName());
        }
        lblValVMOffers.setText("");
    }//GEN-LAST:event_btnToStep2ActionPerformed

    private void txtInternalLatKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInternalLatKeyReleased
        //Check the value entered is a positive number
        checkAnyNumberAndUpdateComponents(txtInternalLat,lblValInternalLat);
        enableAddModifyButtonInStep2();
    }//GEN-LAST:event_txtInternalLatKeyReleased

    private void txtInternalBwKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInternalBwKeyReleased
        //Check the value entered is a positive number
        checkAnyNumberAndUpdateComponents(txtInternalBw,lblValInternalBw);
        enableAddModifyButtonInStep2();
    }//GEN-LAST:event_txtInternalBwKeyReleased

    private void txtCoreMIPSKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCoreMIPSKeyReleased
        //Check the value entered is numberic
        checkNumericAndUpdateComponents(txtCoreMIPS,lblValCoreMIPS);
        enableAddModifyButtonInStep2();
    }//GEN-LAST:event_txtCoreMIPSKeyReleased

    private void txtHostStoreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHostStoreKeyReleased
        //Check the value entered is numberic
        checkNumericAndUpdateComponents(txtHostStore,lblValHostStore);
        enableAddModifyButtonInStep2();
    }//GEN-LAST:event_txtHostStoreKeyReleased

    private void txtHostMemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHostMemKeyReleased
        //Check the value entered is numberic
        checkNumericAndUpdateComponents(txtHostMem,lblValHostMem);
        enableAddModifyButtonInStep2();
    }//GEN-LAST:event_txtHostMemKeyReleased

    private void txtHostCoresKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHostCoresKeyReleased
        //Check the value entered is numberic
        checkNumericAndUpdateComponents(txtHostCores,lblValHostCores);
        enableAddModifyButtonInStep2();
    }//GEN-LAST:event_txtHostCoresKeyReleased

    private void txtVMDelayKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVMDelayKeyReleased
        //Check the value entered is a positive number
        checkAnyNumberAndUpdateComponents(txtVMDelay,lblValVMDelay);
        enableAddModifyButtonInStep2();
        
    }//GEN-LAST:event_txtVMDelayKeyReleased

    private void txtNumOfHostsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumOfHostsKeyReleased
        //Check the value entered is numberic
        checkNumericAndUpdateComponents(txtNumOfHosts,lblValNumOfHosts);
        //JOptionPane.showMessageDialog(null, txtNumOfHosts.getText());
        enableAddModifyButtonInStep2();
        
    }//GEN-LAST:event_txtNumOfHostsKeyReleased

    private void txtExternalBwKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtExternalBwKeyReleased
        //Check the value entered is a positive number
        checkAnyNumberAndUpdateComponents(txtExternalBw,lblValExternalBw);
        enableAddModifyButtonInStep2();
    }//GEN-LAST:event_txtExternalBwKeyReleased

    private void txtExternalLatKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtExternalLatKeyReleased
        //Check the value entered is a positive number
        checkAnyNumberAndUpdateComponents(txtExternalLat,lblValExternalLat);
        enableAddModifyButtonInStep2();
    }//GEN-LAST:event_txtExternalLatKeyReleased

    private void cboxCloudDatacentersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxCloudDatacentersActionPerformed
        TreeModel model=treeMulticloud.getModel();
        if(cboxCloudDatacenters.getSelectedIndex()!=-1 && cboxCloudDatacenters.getSelectedIndex()!=0)
        {
            Object root= model.getRoot();
            enableTextFieldsAndComboboxes(true);
            int expandedNodeIndex=-1;
            //Collapse all rows
            for(int i=0;i<model.getChildCount(root);i++)
                treeMulticloud.collapseRow(i+1);
            //Expand cloud datacenter node selected
            for(int i=0;i<model.getChildCount(root);i++)
                if(i+1==cboxCloudDatacenters.getSelectedIndex())
                {
                    treeMulticloud.expandRow(i+1);
                    expandedNodeIndex=i;
                    break;
                }
            
            //Loading VM offers available in iotsimstream.vmOffers package is already done
            
            
            //Fill the text fields with data available in the tree
            Object expandedNode= model.getChild(root, expandedNodeIndex);
            for(int i=0;i<model.getChildCount(expandedNode);i++)
            {
                Object child=model.getChild(expandedNode, i);
                String a[]=child.toString().split("=");
                String configEleName=a[0].trim();
                String configEleValue=a[1].trim();
                switch(configEleName)
                {
                    case "datacenter.hosts":
                        if(!configEleValue.equals("")){ 
                            fillValueinTextField(txtNumOfHosts, configEleValue);
                            checkNumericAndUpdateComponents(txtNumOfHosts,lblValNumOfHosts);
                        }
                        break;
                    case "vm.delay":
                        if(!configEleValue.equals("")){
                            fillValueinTextField(txtVMDelay, configEleValue);
                            checkAnyNumberAndUpdateComponents(txtVMDelay,lblValVMDelay);
                        }
                        break;
                    case "vm.offers":
                        if(!configEleValue.equals(""))
                        {
                            IntStream.range(0, comboVMoffers.getItemCount()).forEach(
                                itnum -> 
                                { if(comboVMoffers.getItemAt(itnum).equalsIgnoreCase(configEleValue))
                                    comboVMoffers.setSelectedIndex(itnum);
                                }
                            );
                        }
                        break;
                    case "host.cores":
                        if(!configEleValue.equals("")){
                            fillValueinTextField(txtHostCores, configEleValue);
                            checkNumericAndUpdateComponents(txtHostCores,lblValHostCores);
                        }
                        break;
                    case "host.memory":
                        if(!configEleValue.equals("")){
                            fillValueinTextField(txtHostMem, configEleValue);
                            checkNumericAndUpdateComponents(txtHostMem,lblValHostMem);
                        }
                        break;
                    case "host.storage":
                        if(!configEleValue.equals("")){
                            fillValueinTextField(txtHostStore, configEleValue);
                            checkNumericAndUpdateComponents(txtHostStore,lblValHostStore);
                        }
                        break;
                    case "core.mips":
                        if(!configEleValue.equals("")){
                            fillValueinTextField(txtCoreMIPS, configEleValue);
                            checkNumericAndUpdateComponents(txtCoreMIPS,lblValCoreMIPS);
                        }
                        break;
                    case "internal.bandwidth":
                        if(!configEleValue.equals("")){
                            fillValueinTextField(txtInternalBw, configEleValue);
                            checkAnyNumberAndUpdateComponents(txtInternalBw,lblValInternalBw);
                        }
                        break;
                    case "internal.latency":
                        if(!configEleValue.equals("")){
                            fillValueinTextField(txtInternalLat, configEleValue);
                            checkAnyNumberAndUpdateComponents(txtInternalLat,lblValInternalLat);
                        }
                        break;
                    case "external.bandwidth":
                        if(!configEleValue.equals("")){
                            fillValueinTextField(txtExternalBw, configEleValue);
                            checkAnyNumberAndUpdateComponents(txtExternalBw,lblValExternalBw);
                        }
                        break;
                    case "external.latency":
                        if(!configEleValue.equals("")){
                            fillValueinTextField(txtExternalLat, configEleValue);
                            checkAnyNumberAndUpdateComponents(txtExternalLat,lblValExternalLat);
                        }
                        break;
                }
            }
            
            //Check if need to enable Step 2 add / modify button
            enableAddModifyButtonInStep2();
            
            //Check if need to enable Step 3 button
            enableButtonForStep3();
        }
        else
        {
            Object root= treeMulticloud.getModel().getRoot();
            emptyTextFieldsAndLabels();
            enableTextFieldsAndComboboxes(false);
            btnModifyAddStep2.setEnabled(false);
            if(comboVMoffers.getItemCount()>0)
                comboVMoffers.setSelectedIndex(0);
            for(int i=0;i<model.getChildCount(root);i++)
                treeMulticloud.collapseRow(i+1);
            lblValVMOffers.setText("");
        }
    }//GEN-LAST:event_cboxCloudDatacentersActionPerformed

    private void comboSchedulingPolicyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSchedulingPolicyActionPerformed
       
        if(comboSchedulingPolicy.getSelectedIndex()==0)
            changeLabelTextAndColor(lblValSchPolicy, "Policy is not selected", 255, 0, 0);   
        else 
            changeLabelTextAndColor(lblValSchPolicy, "Vaild", 85, 107, 47);

        //Check to move to next step
        enableButtonToStep2();
    }//GEN-LAST:event_comboSchedulingPolicyActionPerformed

    private void comboVMoffersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboVMoffersActionPerformed
        if(comboVMoffers.getSelectedIndex()==0)
            changeLabelTextAndColor(lblValVMOffers, "VM offer is not selected", 255, 0, 0);
        else 
            changeLabelTextAndColor(lblValVMOffers, "Vaild", 85, 107, 47);
       
        enableAddModifyButtonInStep2();
    }//GEN-LAST:event_comboVMoffersActionPerformed

    private void btnModifyAddStep2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyAddStep2ActionPerformed
        TreeModel model=treeMulticloud.getModel();
        Object root= model.getRoot();
        int expandedNodeIndex=-1;
        for(int i=0;i<model.getChildCount(root);i++)
            if(i+1==cboxCloudDatacenters.getSelectedIndex())
            {
                treeMulticloud.expandRow(i+1);
                expandedNodeIndex=i;
                break;
            }
        
        //Add or modify data in the tree nodes
        Object expandedNode= model.getChild(root, expandedNodeIndex);
        String seperator = " = ";
        for(int i=0;i<model.getChildCount(expandedNode);i++)
        {
            DefaultMutableTreeNode child=(DefaultMutableTreeNode) model.getChild(expandedNode, i);
            String a[]=child.toString().split("=");
            String configEleName=a[0].trim();
            String configEleValue="";
            switch(configEleName)
            {
                case "datacenter.hosts":
                    configEleValue=txtNumOfHosts.getText();
                    child.setUserObject(configEleName + seperator +configEleValue);
                    break;
                case "vm.delay":
                    configEleValue=txtVMDelay.getText();
                    child.setUserObject(configEleName + seperator +configEleValue);                    
                    break;
                case "vm.offers":
                    configEleValue=comboVMoffers.getSelectedItem().toString();
                    child.setUserObject(configEleName + seperator +configEleValue);
                    break;
                case "host.cores":
                    configEleValue=txtHostCores.getText();
                    child.setUserObject(configEleName + seperator +configEleValue);
                    break;
                case "host.memory":
                    configEleValue=txtHostMem.getText();
                    child.setUserObject(configEleName + seperator +configEleValue);
                    break;
                case "host.storage":
                    configEleValue=txtHostStore.getText();
                    child.setUserObject(configEleName + seperator +configEleValue);
                    break;
                case "core.mips":
                    configEleValue=txtCoreMIPS.getText();
                    child.setUserObject(configEleName + seperator +configEleValue);
                    break;
                case "internal.bandwidth":
                    configEleValue=txtInternalBw.getText();
                    child.setUserObject(configEleName + seperator +configEleValue);
                    break;
                case "internal.latency":
                    configEleValue=txtInternalLat.getText();
                    child.setUserObject(configEleName + seperator +configEleValue);
                    break;
                case "external.bandwidth":
                    configEleValue=txtExternalBw.getText();
                    child.setUserObject(configEleName + seperator +configEleValue);
                    break;
                case "external.latency":
                    configEleValue=txtExternalLat.getText();
                    child.setUserObject(configEleName + seperator +configEleValue);
                    break;
            }
        }
        //Update UI of the tree
        treeMulticloud.updateUI();
        
        //Make cloud datacenter configuration is true
        clouddatacenterConfigured.set(cboxCloudDatacenters.getSelectedIndex()-1, true);
        
        //Check all cloud datacenters configurations' are filled to enable next step
        enableButtonForStep3();
    }//GEN-LAST:event_btnModifyAddStep2ActionPerformed

    private void btnToStep3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToStep3ActionPerformed
        //Change enable status of tabs
        this.jTabbedPane1.setEnabledAt(0, false);
        this.jTabbedPane1.setEnabledAt(1, false);
        this.jTabbedPane1.setEnabledAt(2, true);
        //Select the active tab
        this.jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_btnToStep3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        FileNameExtensionFilter XMLFileFilter = new FileNameExtensionFilter(
                "only XML files", "xml");
        jfC.setFileFilter(XMLFileFilter);
        int val = jfC.showSaveDialog(null);
        if (val == JFileChooser.APPROVE_OPTION)
        {
            changeLabelTextAndColor(lblValDagFile, "Vaild", 85, 107, 47);
            String fileName=jfC.getSelectedFile().getName();
            lblValDagFilePath.setText(fileName);
        }
        else{
            changeLabelTextAndColor(lblValDagFile, "Please select a DAG file", 255, 0, 0);
            lblValDagFilePath.setText("");
        }

        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnStartSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartSimActionPerformed
        
        //Check to overwrite properties
        int confirm = JOptionPane.showConfirmDialog(null, "The simulation configurations in 'simulation.properties' will be replaced with the values entered in previous steps.\nDo you want to continue?");
        
        if(confirm == JOptionPane.YES_OPTION)
        {
            //Write simulation and multicloud environment configurations in simulation.properties
            try {
                PropertiesConfiguration properties = new PropertiesConfiguration("src/main/java/iotsimstream/resources/simulation.properties");
                properties.clear();

                //Write simulation configurations           
                properties.setProperty("simulation.time", txtSimTime.getText());
                properties.setProperty("scheduling.policy", comboSchedulingPolicy.getSelectedItem().toString());
                properties.setProperty("dag.file", jfC.getSelectedFile().getAbsolutePath());
                properties.setProperty("cloud.datacenter", spinnerNumOfClouds.getValue().toString());
                properties.setProperty("engine.network.bandwidth", txtEngineBw.getText());
                properties.setProperty("engine.network.latency", txtEngineLat.getText());

                //Write mulicloud configurations
                String seperator = "=";
                TreeModel model=treeMulticloud.getModel();
                Object root= model.getRoot();
                for(int i=0;i<model.getChildCount(root);i++)
                {
                    Object clouddatacenterNode= model.getChild(root, i);
                    //properties.setProperty("cloud.provider", i);
                    for(int j=0;j<model.getChildCount(clouddatacenterNode);j++)
                    {
                        DefaultMutableTreeNode child=(DefaultMutableTreeNode) model.getChild(clouddatacenterNode, j);
                        String a[]=child.toString().split(seperator);
                        String configEleName=a[0].trim();
                        String configEleValue=a[1].trim();

                        String suffixClouddatacenter = "#" + i ;
                        properties.setProperty(configEleName + suffixClouddatacenter, configEleValue);
                        /*properties.setProperty("datacenter.hosts" + suffixClouddatacenter, "");
                        properties.setProperty("vm.delay" + suffixClouddatacenter, "");
                        properties.setProperty("vm.offers" + suffixClouddatacenter, "");
                        properties.setProperty("host.cores" + suffixClouddatacenter, "");
                        properties.setProperty("host.memory" + suffixClouddatacenter, "");
                        properties.setProperty("host.storage" + suffixClouddatacenter, "");
                        properties.setProperty("core.mips" + suffixClouddatacenter, "");
                        properties.setProperty("internal.bandwidth" + suffixClouddatacenter, "");
                        properties.setProperty("internal.latency" + suffixClouddatacenter, "");
                        properties.setProperty("external.bandwidth" + suffixClouddatacenter, "");
                        properties.setProperty("external.latency" + suffixClouddatacenter, "");*/
                    }
                }

                //Save the configurations
                properties.save();
            } catch (ConfigurationException e) {
                System.out.println(e.getMessage());
            }

            btnStartSim.setEnabled(false);
            
            //Start the simulation in thread
            runSimulationThread t=new runSimulationThread();
            t.start();
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please copy your configurations in 'simulation.properties' and then try again.");
        }
        
        
        
    }//GEN-LAST:event_btnStartSimActionPerformed

    public class runSimulationThread extends Thread
    {

        public runSimulationThread() {
        }

        @Override
        public void run() {
            
            PrintStream printStream = new PrintStream(new OutputStream() {
                @Override
                public void write(int b) throws IOException {
                    jTextArea1.append(String.valueOf((char)b));
                    jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
                }
            });
            
            System.setOut(printStream);
            
            runSimulation();
        }
        
    }
    
    public void runSimulation() {

            try {
                    //Stream graph application is already set
                    
                    //Get number of datacenters
                    int NumOfDatacenters = Integer.parseInt(Properties.DATACENTERS.getProperty());
                    
                    //Print simulation configuration
                    Log.printLine("========== Simulation configuration ==========");
                    for (Properties property: Properties.values()){
                        if(property.getProperty(0)==null)
                            Log.printLine("= "+property+": "+property.getProperty());
                        else
                            for(int i=0;i<NumOfDatacenters;i++)
                                Log.printLine("= "+property+" (DC"+i+"): "+property.getProperty(i));
                    }
                    Log.printLine("==============================================");
                    Log.printLine("");
                    
                    CloudSim.init(1,Calendar.getInstance(),false);

                    double intializationTime=0; //time required for intilization
                    
                    //Get the runtime of simulation
                    double requestedSimulationTime= Integer.parseInt(Properties.SIMULATION_TIME.getProperty()) + intializationTime; //simulation will run upto this time (i.e. stop simulation time)


                    ArrayList<BigDatacenter> listDatacenters=new ArrayList<BigDatacenter>();
                    long seedVmDelay= 1040529;
                    for(int i=0;i<NumOfDatacenters;i++)
                    {
                        BigDatacenter datacenter = createBigDatacenter(i, "Datacenter" + i, seedVmDelay);
                        listDatacenters.add(datacenter);
                    }

                    //Create engine
                    GraphAppEngine engine = createGraphAppEngine(requestedSimulationTime);
                    

                    //Add ;inks between engine and datacenters and fill engress bandwidth and latency maps between datacenters
                    double engineBandwidth = Double.parseDouble(Properties.ENGINE_NETWORK_BANDWIDTH.getProperty()); //this bandwidth between engine and datacenters
                    double engineLatency = Double.parseDouble(Properties.ENGINE_NETWORK_LATENCY.getProperty()); //this latency between engine and datacenters
                    
                    for(int i=0;i<listDatacenters.size();i++)
                    {
                        //Get datacenter    
                        BigDatacenter datacenter=listDatacenters.get(i); 

                        //Add link between engine and this datacenter with engine network bandwidth and latency
                        NetworkTopology.addLink(engine.getId(),datacenter.getId(),engineBandwidth,engineLatency);

                        int startingSimCount=2; //CloudSim starts counting for entity from 2, so the index of first datacenter is 2
                        //Get egress bandwidth and latency of this datacenter with other datacenters (i.e egress network of this datacenter)
                        double thisDatacenterEgressBw = Double.parseDouble(Properties.EXTERNAL_BANDWIDTH.getProperty(listDatacenters.get(i).getId()-startingSimCount)); //MBps //double bw = DSNetMatrix.getBandwidth(datacenterNumber, datacenterNumber);
                        double thisDatacenterEgressLat = Double.parseDouble(Properties.EXTERNAL_LATENCY.getProperty(listDatacenters.get(i).getId()-startingSimCount)); //MBps //double bw = DSNetMatrix.getBandwidth(datacenterNumber, datacenterNumber);

                        //Fill egress bandwidth map and latency maps of this datacenter with other datacenters
                        for(int j=0;j<listDatacenters.size();j++)
                        {
                            if(i==j)
                              continue;

                            BigDatacenter otherDatacenter=listDatacenters.get(j); 
                            datacenter.getDestDatacenterEgressBwMap().put(otherDatacenter.getId(), thisDatacenterEgressBw);
                            datacenter.getDestDatacenterEgressLatMap().put(otherDatacenter.getId(), thisDatacenterEgressLat);
                        }
                    }
                    
                    CloudSim.startSimulation();
                    engine.printExecutionSummary();

                    CloudSim.stopSimulation();
                    
                    Log.printLine("");
                    Log.printLine("");
            } catch (Exception e) {
                    Log.printLine("Unwanted errors happen.");
                    e.printStackTrace();
            } finally {
                    CloudSim.stopSimulation();
            }
    }


    private BigDatacenter createBigDatacenter(int datacenterNumber, String name, long seedVmDelayGenerator) throws Exception{
            int hosts = Integer.parseInt(Properties.HOSTS_PERDATACENTER.getProperty(datacenterNumber));
            int ram = Integer.parseInt(Properties.MEMORY_PERHOST.getProperty(datacenterNumber));
            int cores = Integer.parseInt(Properties.CORES_PERHOST.getProperty(datacenterNumber));
            int mips = Integer.parseInt(Properties.MIPS_PERCORE.getProperty(datacenterNumber));
            long storage = Long.parseLong(Properties.STORAGE_PERHOST.getProperty(datacenterNumber));
            double bw = Double.parseDouble(Properties.INTERNAL_BANDWIDTH.getProperty(datacenterNumber)); //MBps //double bw = DSNetMatrix.getBandwidth(datacenterNumber, datacenterNumber);
            double latency = Double.parseDouble(Properties.INTERNAL_LATENCY.getProperty(datacenterNumber)); //double latency = DSNetMatrix.getLatency(datacenterNumber, datacenterNumber);
            long creationVMDelay = Long.parseLong(Properties.VM_DELAY.getProperty(datacenterNumber));
            String offerName = Properties.VM_OFFERS.getProperty(datacenterNumber);
            
            VMOffers offers = null;
            try{				
                    Class<?> offerClass = Class.forName(offerName,true,VMOffers.class.getClassLoader());
                    offers = (VMOffers) offerClass.newInstance();
            } catch (Exception e){
                    e.printStackTrace();
                    return null;
            }

            List<Host> hostList = new ArrayList<Host>();
            for(int i=0;i<hosts;i++){
                    List<Pe> peList = new ArrayList<Pe>();
                    for(int j=0;j<cores;j++) 
                    {
                        peList.add(new Pe(j, new PeProvisionerSimple(mips)));
                    }

                    double totalHostBw=35000;
                    hostList.add(new Host(i,new RamProvisionerSimple(ram),new BwProvisionerSimple((long) totalHostBw),
                                                              storage,peList,new VmSchedulerSpaceShared(peList)));
            }

            DatacenterCharacteristics characteristics = new DatacenterCharacteristics("Xeon","Linux","Xen",hostList,10.0,0.0,0.00,0.00,0.00);

            //return new WorkflowDatacenter(name,characteristics,new VmAllocationPolicySimple(hostList),bw,latency,mips,delay,offers,seed2);
            return new BigDatacenter(name,characteristics,new VmAllocationPolicySimple(hostList),bw,latency,mips,creationVMDelay,offers,seedVmDelayGenerator);
    }

    private GraphAppEngine createGraphAppEngine(double requestedST){
            String dagFile = Properties.DAG_FILE.getProperty();
            String className = Properties.SCHEDULING_POLICY.getProperty();
            
            Policy policy = null;
            
            try{		
                Class<?> policyClass = Class.forName(className);
                policy = (Policy) policyClass.newInstance();
                return new GraphAppEngine(dagFile,policy,requestedST);
            } catch (Exception e){
                    e.printStackTrace();
                    return null;
            }
    }
        
    private void enableTextFieldsAndComboboxes(boolean value)
    {
        txtNumOfHosts.setEnabled(value);
        txtVMDelay.setEnabled(value);
        comboVMoffers.setEnabled(value);
        txtNumOfHosts.setEnabled(value);
        txtHostCores.setEnabled(value);
        txtHostMem.setEnabled(value);
        txtHostStore.setEnabled(value);
        txtCoreMIPS.setEnabled(value);
        txtInternalBw.setEnabled(value);
        txtInternalLat.setEnabled(value);
        txtExternalBw.setEnabled(value);
        txtExternalLat.setEnabled(value);
        
    }
    
    private void emptyTextFieldsAndLabels()
    {
        txtNumOfHosts.setText(""); lblValNumOfHosts.setText(""); 
        txtVMDelay.setText(""); lblValVMDelay.setText("");
        txtNumOfHosts.setText(""); lblValNumOfHosts.setText("");
        txtHostCores.setText(""); lblValHostCores.setText("");
        txtHostMem.setText(""); lblValHostMem.setText("");
        txtHostStore.setText(""); lblValHostStore.setText("");
        txtCoreMIPS.setText(""); lblValCoreMIPS.setText("");
        txtInternalBw.setText(""); lblValInternalBw.setText("");
        txtInternalLat.setText(""); lblValInternalLat.setText("");
        txtExternalBw.setText(""); lblValExternalBw.setText("");
        txtExternalLat.setText(""); lblValExternalLat.setText("");
    }
    
    private void fillValueinTextField(JTextField jTextField,String txt)
    {
        jTextField.setText(txt);
    }
    
    private void checkNumericAndUpdateComponents(JTextField jTextField, JLabel jlabel)
    {
        String str= jTextField.getText();
        boolean isNumber=NumberUtils.isDigits(str);
        if(isNumber && NumberUtils.toInt(str)>0)
            changeLabelTextAndColor(jlabel, "Vaild", 85, 107, 47);
        
        else
            changeLabelTextAndColor(jlabel, "Numeric value only (greater than 0)", 255, 0, 0);
        
    }
    
    private void checkAnyNumberAndUpdateComponents(JTextField jTextField, JLabel jlabel)
    {
        String str= jTextField.getText();
        boolean isNumber=NumberUtils.isParsable(str);
        if(isNumber && NumberUtils.toDouble(str)>0.0)
            changeLabelTextAndColor(jlabel, "Vaild", 85, 107, 47);
        
        else
            changeLabelTextAndColor(jlabel, "Any positive number only", 255, 0, 0);
        
    }
    
    private void enableButtonToStep2()
    {
        if(lblValSimTime.getText().equals("Vaild")
                && lblValEngineBw.getText().equals("Vaild")
                && lblValEngineLat.getText().equals("Vaild")
                && lblValSpinnerNumOfClouds.getText().equals("Vaild")
                && lblValSchPolicy.getText().equals("Vaild")
                && lblValDagFile.getText().equals("Vaild")
                )
        {
            btnToStep2.setEnabled(true);
        }
        else
            btnToStep2.setEnabled(false);
    }
    
    private void changeLabelTextAndColor(JLabel lbl, String text, int R, int G, int B)
    {
        lbl.setText(text);
        float[] hsbval=new float[3];
        Color.RGBtoHSB(R, G, B,hsbval);
        lbl.setForeground(Color.getHSBColor(hsbval[0],hsbval[1],hsbval[2]));
    }
    
    private void enableAddModifyButtonInStep2()
    {
        if(lblValNumOfHosts.getText().equals("Vaild")
                && lblValVMDelay.getText().equals("Vaild")
                && lblValVMOffers.getText().equals("Vaild")
                && lblValHostCores.getText().equals("Vaild")
                && lblValHostMem.getText().equals("Vaild")
                && lblValHostStore.getText().equals("Vaild")
                && lblValCoreMIPS.getText().equals("Vaild")
                && lblValInternalBw.getText().equals("Vaild")
                && lblValInternalLat.getText().equals("Vaild")
                && lblValExternalBw.getText().equals("Vaild")
                && lblValExternalLat.getText().equals("Vaild")
                )
        {
            btnModifyAddStep2.setEnabled(true);
        }
        else
            btnModifyAddStep2.setEnabled(false);
    }
    
    public void enableButtonForStep3()
    {
        boolean allTrue=true;
        for(boolean value:clouddatacenterConfigured)
            if(!value)
            {
                allTrue=false;
                break;
            }
        if(allTrue)
            btnToStep3.setEnabled(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SimGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnModifyAddStep2;
    private javax.swing.JButton btnStartSim;
    private javax.swing.JButton btnToStep2;
    private javax.swing.JButton btnToStep3;
    private javax.swing.JComboBox<String> cboxCloudDatacenters;
    private javax.swing.JComboBox<String> comboSchedulingPolicy;
    private javax.swing.JComboBox<String> comboVMoffers;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblValCoreMIPS;
    private javax.swing.JLabel lblValDagFile;
    private javax.swing.JLabel lblValDagFilePath;
    private javax.swing.JLabel lblValEngineBw;
    private javax.swing.JLabel lblValEngineLat;
    private javax.swing.JLabel lblValExternalBw;
    private javax.swing.JLabel lblValExternalLat;
    private javax.swing.JLabel lblValHostCores;
    private javax.swing.JLabel lblValHostMem;
    private javax.swing.JLabel lblValHostStore;
    private javax.swing.JLabel lblValInternalBw;
    private javax.swing.JLabel lblValInternalLat;
    private javax.swing.JLabel lblValNumOfHosts;
    private javax.swing.JLabel lblValSchPolicy;
    private javax.swing.JLabel lblValSimTime;
    private javax.swing.JLabel lblValSpinnerNumOfClouds;
    private javax.swing.JLabel lblValVMDelay;
    private javax.swing.JLabel lblValVMOffers;
    private javax.swing.JSpinner spinnerNumOfClouds;
    private javax.swing.JTree treeMulticloud;
    private javax.swing.JTextField txtCoreMIPS;
    private javax.swing.JTextField txtEngineBw;
    private javax.swing.JTextField txtEngineLat;
    private javax.swing.JTextField txtExternalBw;
    private javax.swing.JTextField txtExternalLat;
    private javax.swing.JTextField txtHostCores;
    private javax.swing.JTextField txtHostMem;
    private javax.swing.JTextField txtHostStore;
    private javax.swing.JTextField txtInternalBw;
    private javax.swing.JTextField txtInternalLat;
    private javax.swing.JTextField txtNumOfHosts;
    private javax.swing.JTextField txtSimTime;
    private javax.swing.JTextField txtVMDelay;
    // End of variables declaration//GEN-END:variables

class EntryDocumentListener implements DocumentListener {
    JTextField txtComponent;
    JLabel lblComponent;

        public EntryDocumentListener(JTextField comp, JLabel comp2) {
            this.txtComponent=comp;
            this.lblComponent=comp2;
        }
    
    
        @Override
        public void insertUpdate(DocumentEvent e) {
            Document doc = (Document)e.getDocument();
            //Check the value entered is numberic
            checkNumericAndUpdateComponents(txtComponent,lblComponent);
            //Check to move to next step
            enableButtonToStep2();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            Document doc = (Document)e.getDocument();
            //Check the value entered is numberic
            checkNumericAndUpdateComponents(txtComponent,lblComponent);
            //Check to move to next step
            enableButtonToStep2();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            Document doc = (Document)e.getDocument();
            //Check the value entered is numberic
            checkNumericAndUpdateComponents(txtComponent,lblComponent);
            //Check to move to next step
            enableButtonToStep2();
        }
    }

}


